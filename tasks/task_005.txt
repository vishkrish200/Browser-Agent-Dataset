# Task ID: 5
# Title: Implement Data Collection Module
# Status: done
# Dependencies: 2, 3, 4
# Priority: high
# Description: Develop the Unified Data Collector module to gather HTML, screenshots, and action data from Browserbase and Stagehand for each interaction step.
# Details:
1. Create a `data_collector.py` module with DataCollector class
2. Implement methods to:
   - Configure Browserbase sessions for recording (HTML, screenshots)
   - Retrieve HTML DOM snapshots for each step
   - Capture WebP screenshots at appropriate resolution
   - Collect action metadata from Stagehand
   - Generate unique step_id and session_id
3. Implement S3 storage integration:
   - Create bucket structure following `s3://checkpoints/{session_id}/{step_id}.{html,webp,action.json}`
   - Handle upload/download operations
   - Implement retry logic for network operations
4. Add configuration for collection frequency and data types

Example usage:
```python
from data_collector import DataCollector

collector = DataCollector(storage_config={"type": "s3", "bucket": "checkpoints"})
collector.configure_session(browserbase_session)
step_data = collector.collect_step_data(
    browserbase_session_id,
    stagehand_task_id,
    url="https://youtube.com",
    action_data=stagehand_action_result
)
```

# Test Strategy:
Unit tests for data collection logic with mocked services. Integration test collecting real data from a simple browser interaction. Test S3 storage operations with a test bucket. Verify data format and completeness.

# Subtasks:
## 1. Module Structure Setup [done]
### Dependencies: None
### Description: Design and scaffold the core module structure to support extensibility and maintainability.
### Details:
Define directories, base classes, and interfaces for session, collection, S3 integration, and configuration components.
<info added on 2025-05-14T15:17:47.675Z>
Define directories, base classes, and interfaces for session, collection, S3 integration, and configuration components.

The DataCollector module will be structured as follows:

1. Core Responsibilities:
   - Orchestrate per-step data collection (HTML, screenshot, action metadata)
   - Interface with BrowserbaseClient and StagehandClient
   - Interface with storage components (S3/local)
   - Generate unique step IDs for data tracking

2. File Structure (src/data_collector/):
   - __init__.py: Export DataCollector, StepData, and DataCollectionError
   - collector.py: Main DataCollector class implementation
   - config.py: Configuration definitions for data types and storage options
   - exceptions.py: Custom error classes (DataCollectionError, StorageError)
   - types.py: TypedDict definitions for StepData and storage configurations
   - storage.py: Abstract StorageBackend class with S3Storage and LocalStorage implementations

3. DataCollector Class Design:
   - Constructor accepting storage configuration and client instances
   - Methods for Browserbase session recording configuration
   - Step data collection method handling HTML, screenshots, and metadata
   - Helper methods for ID generation and data processing

4. Data Types:
   - StepData TypedDict with fields for IDs, timestamps, URLs, and artifact paths
   - StorageConfig TypedDict for configuring storage backends

5. Initial Implementation Files:
   - Create all module files with skeleton implementations
   - Set up corresponding test directory structure
</info added on 2025-05-14T15:17:47.675Z>

## 2. Session Configuration Implementation [done]
### Dependencies: 5.1
### Description: Develop logic for initializing and configuring sessions, including browser and driver setup.
### Details:
Implement session management using best practices such as automatic driver configuration and support for multiple browsers.

## 3. HTML, Screenshot, and Action Collection [done]
### Dependencies: 5.2
### Description: Implement mechanisms to collect HTML snapshots, screenshots, and user actions during sessions.
### Details:
Ensure robust element location, error handling, and support for multiple data types as per automation best practices.

## 4. S3 Integration Layer [done]
### Dependencies: 5.1
### Description: Develop an abstraction layer for interacting with S3-compatible storage for uploads and downloads.
### Details:
Support authentication, bucket management, and efficient data transfer operations.

## 5. Upload Logic Implementation [done]
### Dependencies: 5.3, 5.4
### Description: Implement logic to upload collected artifacts (HTML, screenshots, actions) to S3 storage.
### Details:
Ensure data integrity, efficient batching, and error reporting during uploads.

## 6. Download Logic Implementation [done]
### Dependencies: 5.4
### Description: Develop logic to retrieve artifacts from S3 storage for validation or further processing.
### Details:
Support selective downloads, versioning, and error handling.

## 7. Retry and Error Handling Mechanisms [done]
### Dependencies: 5.5, 5.6
### Description: Implement robust retry logic and error handling for all S3 and collection operations.
### Details:
Incorporate exponential backoff, logging, and configurable retry limits.

## 8. Configuration Management [done]
### Dependencies: 5.1
### Description: Design and implement a flexible configuration system for all module parameters.
### Details:
Support environment variables, config files, and runtime overrides for session, S3, and retry settings.

## 9. Comprehensive Testing and Validation [done]
### Dependencies: 5.2, 5.3, 5.4, 5.5, 5.6, 5.7, 5.8
### Description: Develop and execute tests for all components, including integration, error, and edge cases.
### Details:
Ensure correctness, reliability, and maintainability through automated and manual testing strategies.

